<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="nl.naturalis.springdemo" default="main" basedir=".">
    <description>
        Create a Spring MVC (WAR) with Ant build script
    </description>

    <!-- Project Structure -->
    <property name="jdk.version" value="1.7"/>
    <property name="projectName" value="nl.naturalis.springdemo"/>
    <property name="src.dir" location="src"/>
    <property name="web.dir" value="WebContent"/>
    <property name="web.classes.dir" location="${web.dir}/WEB-INF/classes"/>
    <property name="resources.dir" location="${web.dir}/WEB-INF/resources"/>
    <property name="target.dir" location="build"/>
    <property name="target.temp.dir" location="build/temp"/>
    <property name="lib.dir" value="lib"/>
    <property name="wildfly.home" value="${user.home}/lib/wildfly-8.1.0.Final"/>

    <!-- ivy start -->
    <target name="resolve" description="retrieve dependencies with ivy">
        <echo message="Getting dependencies..."/>
        <ivy:retrieve/>

        <ivy:cachepath pathid="compile.path" conf="compile"/>
        <ivy:cachepath pathid="runtime.path" conf="runtime"/>
        <ivy:cachepath pathid="test.path" conf="test"/>
    </target>

    <!-- install ivy if you don't have ivyide-->
    <target name="ivy" description="Install ivy">
        <mkdir dir="${user.home}/.ant/lib"/>
        <!-- TODO: dynamic ivy version. -->
        <get dest="${user.home}/.ant/lib/ivy.jar"
             src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0-rc1/ivy-2.4.0-rc1.jar"/>
    </target>
    <!-- ivy end -->

    <!-- Create folders -->
    <target name="init">
        <mkdir dir="${src.dir}"/>
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${web.classes.dir}"/>
    </target>

    <!-- Copy *.xml or *.properties from ${resources.dir} to ${web.classes.dir} -->
    <target name="copy-resources" description="copy Java resources like xml and properties files">
        <copy todir="${web.classes.dir}">
            <fileset dir="${resources.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>


    <!-- Compile Java source from ${src.dir} and output it to ${web.classes.dir} -->
    <target name="compile" depends="init, resolve" description="compile source code">
        <mkdir dir="${web.classes.dir}"/>
        <javac destdir="${web.classes.dir}" source="${jdk.version}" target="${jdk.version}"
               debug="true" includeantruntime="false" classpathref="compile.path">
            <src path="${src.dir}"/>
        </javac>
    </target>

    <!-- Delete folders -->
    <target name="clean" description="clean up">
        <delete dir="${web.classes.dir}"/>
        <delete dir="${target.dir}"/>
        <delete dir="$(wildfly.dir}/standalone/deployments/*.war*"/>
    </target>

    <!-- Create the final WAR file for deployment -->
    <target name="package" depends="clean, compile, copy-resources" description="create a war file">
        <!-- ivy get dependencies and put it in ${lib.dir} -->
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]" conf="runtime"/>
        <war destfile="${target.dir}/nl.naturalis.springdemo.war" webxml="${web.dir}/WEB-INF/web.xml">

            <webinf dir="${web.dir}/WEB-INF"/>
            <lib dir="${lib.dir}"/>
            <zipfileset dir="${web.dir}/WEB-INF/resources" prefix="resources"/>
        </war>
    </target>

    <!-- Compiles and copies the war file to the wildfly directory -->
    <target name="deploy" depends="package" description="Copy the created war file to the Wildfly home directory">
        <copy file="${target.dir}/nl.naturalis.springdemo.war" todir="${wildfly.home}/standalone/deployments"/>
    </target>

    <!-- Starts the WildFly server and deploys the war file -->
    <target name="start-server" depends="deploy" description="Start the WildFly server">
        <exec executable="${wildfly.home}/bin/standalone.bat"/>
    </target>

    <!-- The deault action if not are given -->
    <target name="main" depends="package"/>

</project>